import os
import datetime
import xml.dom.minidom
import json
import requests
from feedgen.feed import FeedGenerator

fg = FeedGenerator()

Auth = os.environ['AUTH']  # Replace with Basic Authentication Header

headers = {
    'Accept': 'application/json',
    'Authorization': f'Basic {Auth}',
}
json_obj = []
done = False
alert_list = []


def get_all_items(page):
    print(f'Fetching page: {page}')
    response = requests.request('GET', f'https://www.opencve.io/api/reports?page={page}', headers=headers)
    if response.status_code == 200 and len(response.json()) > 0:
        alert_list.extend(response.json())
        return False
    elif response.status_code == 404 or len(response.json()) < 1:
        return True
    elif response.status_code == 429:
        print(f"Rate limit: {response.text}")
        exit()


i = 1
while not done:
    done = get_all_items(i)
    i += 1

print(f'Total reports: {len(alert_list)}')

with open('opencve.json', 'r') as f:
    old_json = json.loads(f.read())
    url_set = {item['URL'] for item in old_json}

    for alert in alert_list[::-1]:
        report_id = alert['id']
        report_url = f'https://www.opencve.io/reports/{report_id}'
        if report_url not in url_set:
            print(f'Fetching report {report_id}')
            url = f'https://www.opencve.io/api/reports/{report_id}/alerts'
            response = requests.request("GET", url, headers=headers)
            if response.json():
                id = response.json()[0]['id']
                cve = response.json()[0]['cve']
                date = response.json()[0]['created_at']
                vendors = response.json()[0]['details']['vendors']

                # Get CVE info
                print(f'Fetching info about {cve}')
                url = f'https://www.opencve.io/api/cve/{cve}'
                response_cve = requests.request('GET', url, headers=headers)
                try:
                    summary = response_cve.json()['summary']
                except KeyError:
                    summary = ''
                score = response_cve.json()['cvss']['v3']
                # Add to RSS
                fe = fg.add_entry()
                fe.id(id)
                fe.title(f"{cve} ({score}) - {summary}")
                fe.description(f"{cve} - {','.join(vendors)}")
                fe.link(href=report_url)
                fe.category({'term': ','.join(vendors)})
                fe.pubDate(datetime.datetime.strptime(date, '%Y-%m-%dT%H:%M:%SZ').replace(tzinfo=datetime.timezone.utc))

                # Add to json
                json_obj.append(
                    {'cve': cve, 'date': date, 'vendors': ','.join(vendors), 'score': score, 'URL': report_url, 'summary': summary})

with open('opencve.json', 'a+') as f:
    f.seek(0)
    if not json_obj:
        print('No changes')
        exit()
    else:
        json.dump(json_obj, f, indent=4)
        # Write RSS
        fg.id(f'12')
        fg.title('OpenCVE RSS feed')
        fg.author({'name': 'Kaan Arslan'})
        fg.link(href=f'https://opencve.io', rel='alternate')
        fg.docs('https://github.com/Kaan-Deltics/OpenCVE-RSS-Feed')
        fg.description(f'RSS feed of opencve.io')
        fg.language('en')
        fg.rss_file('rss.xml')
        dom = xml.dom.minidom.parse('rss.xml')
        pretty_xml_as_string = dom.toprettyxml()
        with open('rss.xml', 'w') as rss:
            rss.write(pretty_xml_as_string)
